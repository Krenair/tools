#!/usr/bin/env python
import sr.inventory as srinv
import sr.inventory.assetcode as assetcode
import sr.inventory.oldinv as oldinv
import sys, os, argparse

ASSET_CODE = 0
PART_TYPE = 1

COLOUR_RESET = "\033[0m"
COLOUR_GREEN = "\033[1;32m"
COLOUR_RED = "\033[1;31m"
COLOUR_YELLOW = "\033[1;33m"

desc = "Find the location of a specific item in the inventory."

aparser = argparse.ArgumentParser(description=desc)
aparser.add_argument("-s", "--stat", action="store_true", default=False, dest="asset_stat", help="Show the status of each asset listed based upon the 'condition' field.")
aparser.add_argument("itemspecs", metavar="ITEM_SPEC", nargs="+", help="Either an SR asset code or part type. The nature of the specifier is auto-detected and asset codes/part types can be mixed.")

args = aparser.parse_args()

top = oldinv.gettoplevel()
if top == None:
    print >>sys.stderr, "Error: Must be run from within the inventory."
    exit(1)
inv = srinv.Inventory(top)

parts = []
spec_type = ASSET_CODE
for c in args.itemspecs:
    code = c.upper().strip()
    if code[0:2] == "SR":
        code = code[2:]

    try:
        assetcode.code_to_num(code)
        spec_type = ASSET_CODE
    except:
        if c in inv.root.types:
            spec_type = PART_TYPE
        else:
            print >>sys.stderr, "Error: %s is an invalid asset code or part type." % c
            exit(1)

    if spec_type == ASSET_CODE:
        try:
            part = inv.root.parts[code]
        except KeyError:
            print >>sys.stderr, "Error: There is no part with code %s." % code
            exit(1)

        parts.append(part)
    else:
        try:
            parts.extend(inv.root.types[c])
        except:
            print >>sys.stderr, "Error: There is no part type %s." % c
            exit(1)

stat_colour = ""
for part in parts:
    if args.asset_stat:
        if part.condition == "broken":
            stat_colour = COLOUR_RED
        elif part.condition == "unknown":
            stat_colour = COLOUR_YELLOW
        elif part.condition == "working":
            stat_colour = COLOUR_GREEN
        print part.path, stat_colour, part.condition, COLOUR_RESET
    else:
        print part.path
