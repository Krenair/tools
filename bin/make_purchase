#!/usr/bin/env python
# coding=utf8

import argparse
import sr.spending.spending as srspending
import sr.budget.budget as srbudget
import xmlrpclib, getpass, os, sys
from random import choice
from decimal import Decimal as D

parser = argparse.ArgumentParser( description = "Make an SR purchase request" )
parser.add_argument( "-s", "--server",
		     help = "Hostname of server to talk to",
		     default = "www.studentrobotics.org" )
parser.add_argument( "-p", "--port",
		     help = "Server port number to talk to",
		     type = int, default = 443 )
args = parser.parse_args()

if not (os.path.exists('.git') and os.path.exists('spending.py')):
	print >>sys.stderr, "Please run in spending.git top level directory"
	exit(1)

user = raw_input("Username: ")
supplier = raw_input("Supplier: ")
counter = 1
items = []
while True:
	item = raw_input("Item #" + str(counter) + ": ")
	if item == "":
		break
	cost = raw_input("Line cost: ")
	items.append([item,cost])
	counter += 1
purpose = raw_input("What are the items for?: ")
budget = raw_input("Budget line: ")

try:
	budgetline = srspending.load_budget_with_spending('.').path(budget)
except KeyError:
	print >>sys.stderr, "Budget line '" + budget + "' not found"
	exit()

spent = 0
for trans in budgetline.transactions:
	spent += trans.cost

rpc_url = "https://{user}:{password}@{server}:{port}/trac/login/rpc".format(
	user = user,
	password = getpass.getpass(),
	server = args.server,
	port = args.port )

server = xmlrpclib.ServerProxy(rpc_url)

if "ticket.create" not in server.system.listMethods():
	print >>sys.stderr, "Error: ticket.create not found in trac's RPC methods"
	exit(1)

description = ""

msg = ""
msg += "{{{Payee: " + str(user) + "}}}\n"
msg += "{{{Supplier: " + str(supplier) + "}}}\n"
msg += "{{{Items: }}}\n"
totalCost = D(0)
for item in items:
	totalCost += D(item[1].strip('£ '))
	msg += "  || " + item[0] + ' || £' + item[1].strip('£ ') + "||\n" 
	description += item[0] + ", "
msg += "{{{Total cost: £%.2f}}}\n" % totalCost
msg += "{{{Budget line: " + str(budget) + "}}}\n"

if spent + totalCost > budgetline.cost:
	print "That purchase takes you over the budget limit"
	print "\tBudget line: £{0}".format( budgetline.cost )
	print "\tExpenditure: £{0} {1}%".format( spent + totalCost,
						100 * (spent + totalCost)/budgetline.cost )
	if not raw_input("Continue anyway? [y/N] ").lower() == 'y':
		exit()

name = ""
name += items[0][0].replace(" ","-")
if len(items) > 1:
	name += '-and-'
	name += choice(items[1:])[0].replace(" ","-")
	if len(items) > 2:
		name += '-etc'

summary = name.replace("-"," ") + " for " + purpose
name += ".yaml"

description = description.rstrip(', ')
description += " for " + purpose

ticketNum = server.ticket.create(summary, msg, {'component':"Purchasing",'owner':"treasurer",'type':"task"})

if not ticketNum > 0:
	print "Unable to create a valid ticket"
	exit()

spendName = os.path.join("pending",name)
spendFile = open(spendName, "w")

spendFile.write("summary: " + summary + '\n')
spendFile.write("description: >-\n  " + description + '\n')
spendFile.write("budget: " + budget + '\n')
spendFile.write("cost: " + str(totalCost) + '\n')
spendFile.write("trac: " + str(ticketNum) + '\n')
spendFile.flush()
spendFile.close()

print "Purchase ready (trac: #" + str(ticketNum) + ")"
