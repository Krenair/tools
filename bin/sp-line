#!/usr/bin/env python
# coding=utf8


import sr.spending.spending as spending
import sys, os, argparse
from sr.budget import BudgetTree

desc = "Inspect spending for budget line"

p = argparse.ArgumentParser(description=desc)
p.add_argument("budgetline", help="The budget line to inspect")

args = p.parse_args()

if not os.path.exists('.git'):
	print >>sys.stderr, "Please run in spending.git top level directory"
	sys.exit(1)

bud = spending.load_budget_with_spending('.')

try:
	budline = bud.path(args.budgetline)
except KeyError:
	print >>sys.stderr, "Budget line '" + args.budgetline + "' not found"
	sys.exit(1)

paid_funds = 0
pending_funds = 0
remaining_funds = 0

if isinstance(budline, BudgetTree):
	remaining_funds = budline.total()
else:
	remaining_funds = budline.cost
orig_funds = remaining_funds

def print_line(budline):
	global paid_funds, pending_funds, remaining_funds
	for trans in budline.transactions:
		if trans.date != None:
			print "Transaction '" + trans.name + "' " + str(trans.date) + ":"
			paid_funds += trans.cost
		else:
			print "Transaction '" + trans.name + "' (pending):"
			pending_funds += trans.cost
		print "  Cost: " + str(trans.cost)
		print "  Trac: #" + str(trans.trac)
		remaining_funds -= trans.cost

if isinstance(budline, BudgetTree):
	for trans in budline.walk():
		print_line(trans)
else:
	print_line(budline)

print "Summary: for line {0}, £{1} budgeted, £{2} spent, line is".format(args.budgetline, orig_funds, paid_funds + pending_funds),
if remaining_funds >= 0:
	print "under",
else:
	print "OVER",
print "budget by £" + str(remaining_funds),
print "(£" + str(pending_funds) + " pending)"
