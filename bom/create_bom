#!/usr/bin/env python
import os, sys, time, parts_db, bom, geda

header_file = os.path.dirname(__file__) + "/bom_header.inc"

def html_header(f, names=None):
    headerf = open(header_file, "r")
    header = headerf.read()
    headerf.close()
    title = ""
    if names != None:
        title = " - "
        title = title + reduce(lambda t, n: t + ', ' + n, names)

    f.write(header % {'title': title})

def html_footer(f):
    f.write("""
<p>Generated on %s with %s.</p>
</body>
</html>""" % (time.asctime(), os.path.basename(sys.argv[0])) )

def pcode_extract_str(pcode):
    for c in range(0, len(pcode)):
        if pcode[c].isdigit():
            return pcode[:c]

def pcode_extract_num(pcode):
    for c in range(0, len(pcode)):
        if pcode[c].isdigit():
            if "." in pcode[c:]:
                return float( pcode[c:] )
            else:
                return int( pcode[c:] )

def pcode_cmp(a, b):
    "Compare two part codes"
    return cmp( pcode_extract_num(a),
                pcode_extract_num(b) )

def pcode_find_ranges(pcodes):
    grouped = []
    pr = {}

    for pc in pcodes:
        n = pcode_extract_num(pc)
        cs = pcode_extract_str(pc)

        if not pr.has_key(cs):
            pr[cs] = []

        if not isinstance(n, int):
            grouped.append(pc)
            continue

        pr[cs].append(n)

    for prefix, nums in pr.iteritems():
        while len(nums):
            start = end = min(nums)
            while end in nums:
                nums.remove(end)
                end += 1
            end -= 1

            if end - start < 2:
                for n in range(start, end+1):
                    grouped.append( "%s%i" % (prefix, n) )
            else:
                grouped.append( "%s%i-%i" % (prefix, start, end) )

    return grouped

def wrap_order_number(onum):
    if len(onum) > 10:
        return onum[:10] + "<wbr>" + onum[10:]
    else:
        return onum

if len(sys.argv) < 3:
    print "Usage: %s [--layout=LAYOUT] SCHEMATIC(S) OUTFILE" % (os.path.basename(sys.argv[0]))
    print "Where:"
    print "	- LAYOUT is the PCB layout for a single design"
    print "	- SCHEMATIC is the schematic to read from (can be more than one)"
    print "	- OUTFILE is the output HTML file"
    sys.exit(1)

lib = parts_db.Db(bom.PARTS_DB)
if sys.argv[-1].split('.')[-1] == "sch":
    print "Output file has extension 'sch', aborting as this is almost certainly a mistake"
    sys.exit(1)

has_layout = False
if sys.argv[1][0:9] == "--layout=":
    pcb = geda.PCB(sys.argv[1][9:])
    has_layout = True

outf = open( sys.argv[-1], "w" )

multibom = bom.MultiBoardBom(lib)
multibom.load_boards_args( sys.argv[2 if has_layout else 1:-1],
                           allow_multipliers = False )

html_header(outf, map(lambda n: os.path.basename(n), sys.argv[1:-1]))

def srcode_sort(x,y):
    return cmp(x.part["sr-code"], y.part["sr-code"])

lines = multibom.values()
lines.sort(srcode_sort)
line_num = 1
total_parts = 0

for line in lines:
    outf.write("<tr>")
    p = line.part

    if p["sr-code"] == "sr-nothing":
        "Ignore sr-nothing -- we don't want it in HTML BOMs"
        continue

    outf.write( "<td>%i.</td>" % line_num )
    line_num += 1

    outf.write( """<td>%(sr-code)s</td>
<td>%(description)s</td>
<td>%(package)s</td>
<td>%(supplier)s</td>""" % p )

    url = p.get_url()
    order_num = wrap_order_number(p["order-number"])
    if url == None:
        outf.write( "<td>%s</td>" % order_num )
    else:
        outf.write( """<td><a href="%s">%s</a></td>""" % ( url, order_num ) )

    outf.write( "<td>%i</td>" % len(line) )
    total_parts += len(line)

    pcodes = [x[1] for x in line]
    pcodes.sort(cmp=pcode_cmp)
    pcodes = pcode_find_ranges(pcodes)
    if has_layout:
        pcodes = ["""<a onclick="highlight('%(x)s');return false" href="#">%(x)s</a>""" %
              {'x': x} for x in pcodes]
    outf.write( "<td>%s</td>" % ", ".join(pcodes) )

    outf.write("</tr>")

outf.write( "</tbody></table>" )
outf.write( "<p>%i parts in total.</p>" % total_parts )

html_footer(outf)
